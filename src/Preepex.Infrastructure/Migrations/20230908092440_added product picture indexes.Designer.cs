// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Preepex.Core.Domain.Entities;

#nullable disable

namespace Preepex.Infrastructure.Migrations
{
    [DbContext(typeof(PreepexContext))]
    [Migration("20230908092440_added product picture indexes")]
    partial class addedproductpictureindexes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8_general_ci")
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8");

            modelBuilder.Entity("Customeraddress", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Address_Id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Customer_Id");

                    b.HasKey("AddressId", "CustomerId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "AddressId" }, "IX_64250EDA44F67EFAD151EB1EFE0D2EA08456B864");

                    b.HasIndex(new[] { "CustomerId" }, "IX_9AC0D6FE14A030F18305F46F428ACB6898B4187F");

                    b.ToTable("customeraddresses", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("CustomerCustomerroleMapping", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Customer_Id");

                    b.Property<int>("CustomerRoleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("CustomerRole_Id");

                    b.HasKey("CustomerId", "CustomerRoleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CustomerId" }, "IX_09E9645547A7290962418327EE12D590BC1995F5");

                    b.HasIndex(new[] { "CustomerRoleId" }, "IX_E0FD9013E1AA40ED714BD90CE38AA3C1D57484E5");

                    b.ToTable("customer_customerrole_mapping", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("DiscountAppliedtocategory", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Discount_Id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Category_Id");

                    b.HasKey("DiscountId", "CategoryId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "DiscountId" }, "IX_3B15D52F81BDC47B279B9DD028BD1445B9A462F7");

                    b.HasIndex(new[] { "CategoryId" }, "IX_49CBAA99A1E2A276261D82400D383E5FE727C172");

                    b.ToTable("discount_appliedtocategories", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("DiscountAppliedtomanufacturer", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Discount_Id");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Manufacturer_Id");

                    b.HasKey("DiscountId", "ManufacturerId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ManufacturerId" }, "IX_4878483EA6D877C2F4E05C5D2E7DCBCE5F1D7D84");

                    b.HasIndex(new[] { "DiscountId" }, "IX_B27FB643C3BB153FA3E393FE3CE8AB72E6A6B90F");

                    b.ToTable("discount_appliedtomanufacturers", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("DiscountAppliedtoproduct", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Discount_Id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Product_Id");

                    b.HasKey("DiscountId", "ProductId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "DiscountId" }, "IX_33C579DE1781A7E8E15007E3FE54F0FF377BC60C");

                    b.HasIndex(new[] { "ProductId" }, "IX_57E9214528270AE442DF14F651EFC02B2218B19E");

                    b.ToTable("discount_appliedtoproducts", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("PermissionrecordRoleMapping", b =>
                {
                    b.Property<int>("PermissionRecordId")
                        .HasColumnType("int(11)")
                        .HasColumnName("PermissionRecord_Id");

                    b.Property<int>("CustomerRoleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("CustomerRole_Id");

                    b.HasKey("PermissionRecordId", "CustomerRoleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "PermissionRecordId" }, "IX_998C4F8A5D91E3E4FDC76D88B167DE40A75A3259");

                    b.HasIndex(new[] { "CustomerRoleId" }, "IX_E7B19180C681C3B292B2234BF89F7F3FB62264BF");

                    b.ToTable("permissionrecord_role_mapping", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Aclrecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("CustomerRoleId")
                        .HasColumnType("int(11)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int(11)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EntityName"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerRoleId" }, "IX_02F617482C79A6C2BE7A0C8A6455B2E8E14780EC");

                    b.HasIndex(new[] { "EntityId", "EntityName" }, "IX_AclRecord_EntityId_EntityName");

                    b.ToTable("aclrecord", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Activitylog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("ActivityLogTypeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Comment"), "utf8");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int(11)");

                    b.Property<string>("EntityName")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EntityName"), "utf8");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("IpAddress"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "IX_0F273FFBCE7BB550E87EADE8C0D4FE78CEA4F21A");

                    b.HasIndex(new[] { "CreatedOnUtc" }, "IX_ActivityLog_CreatedOnUtc");

                    b.HasIndex(new[] { "ActivityLogTypeId" }, "IX_FA05048FC292BA387AD9F54569223A2361D29543");

                    b.ToTable("activitylog", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Activitylogtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SystemKeyword"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("activitylogtype", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Addressattribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AttributeControlTypeId")
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("addressattribute", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Addressattributevalue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AddressAttributeId")
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AddressAttributeId" }, "IX_B8DBEDC16E08BA4792A1836F0CFBAE45476188BC");

                    b.ToTable("addressattributevalue", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Affiliate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int(11)");

                    b.Property<string>("AdminComment")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AdminComment"), "utf8");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FriendlyUrlName")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FriendlyUrlName"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AddressId" }, "IX_53E30AC40CBC90074D6593764F2E48388B497292");

                    b.ToTable("affiliate", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Backinstocksubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_8894A8AA1D20379488AAF6BD14062F7BFB17E220");

                    b.HasIndex(new[] { "CustomerId" }, "IX_CA2CD976F0AAC58A1BC6565C5FA026CCC23AF1A7");

                    b.ToTable("backinstocksubscription", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.BlogComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("BlogPostId")
                        .HasColumnType("int(11)");

                    b.Property<string>("CommentText")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CommentText"), "utf8");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "IX_610623902D397FF33F3287BF1345D7512C66145D");

                    b.HasIndex(new[] { "BlogPostId" }, "IX_7EA6B2B4EAF446CC41EE99A3824A85C8190B57D0");

                    b.HasIndex(new[] { "StoreId" }, "IX_9B64658D6D24EDEAB7F497D63D82313E0CCB64F5");

                    b.ToTable("blogcomment", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Blogpost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("AllowComments")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Body"), "utf8");

                    b.Property<string>("BodyOverview")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("BodyOverview"), "utf8");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<bool>("IncludeInSitemap")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaDescription"), "utf8");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaKeywords"), "utf8");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaTitle"), "utf8");

                    b.Property<DateTime?>("StartDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Tags")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Tags"), "utf8");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Title"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_EFC2F432AA3D91D9D6E18EDFF06769FF1B7D5CD8");

                    b.ToTable("blogpost", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Body"), "utf8");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerRoleId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("DontSendBeforeDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Subject"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("campaign", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("AllowCustomersToSelectPageSize")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CategoryTemplateId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IncludeInTopMenu")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManuallyPriceRange")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaDescription"), "utf8");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaKeywords"), "utf8");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaTitle"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("PageSize")
                        .HasColumnType("int(11)");

                    b.Property<string>("PageSizeOptions")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PageSizeOptions"), "utf8");

                    b.Property<int>("ParentCategoryId")
                        .HasColumnType("int(11)");

                    b.Property<int>("PictureId")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("PriceFrom")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("PriceRangeFiltering")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PriceTo")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowOnHomepage")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Deleted" }, "IX_Category_Deleted_Extended");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Category_DisplayOrder");

                    b.HasIndex(new[] { "LimitedToStores" }, "IX_Category_LimitedToStores");

                    b.HasIndex(new[] { "ParentCategoryId" }, "IX_Category_ParentCategoryId");

                    b.HasIndex(new[] { "SubjectToAcl" }, "IX_Category_SubjectToAcl");

                    b.ToTable("category", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Categorytemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ViewPath"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("categorytemplate", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Checkoutattribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AttributeControlTypeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("ConditionAttributeXml")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ConditionAttributeXml"), "utf8");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DefaultValue"), "utf8");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<bool>("ShippableProductRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TaxCategoryId")
                        .HasColumnType("int(11)");

                    b.Property<string>("TextPrompt")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TextPrompt"), "utf8");

                    b.Property<string>("ValidationFileAllowedExtensions")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ValidationFileAllowedExtensions"), "utf8");

                    b.Property<int?>("ValidationFileMaximumSize")
                        .HasColumnType("int(11)");

                    b.Property<int?>("ValidationMaxLength")
                        .HasColumnType("int(11)");

                    b.Property<int?>("ValidationMinLength")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("checkoutattribute", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Checkoutattributevalue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("CheckoutAttributeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("ColorSquaresRgb")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ColorSquaresRgb"), "utf8");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<decimal>("PriceAdjustment")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("WeightAdjustment")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CheckoutAttributeId" }, "IX_36B591D67F6ADB5848B096AF344F381721D1781C");

                    b.ToTable("checkoutattributevalue", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("AllowsBilling")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowsShipping")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("NumericIsoCode")
                        .HasColumnType("int(11)");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SubjectToVat")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ThreeLetterIsoCode")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ThreeLetterIsoCode"), "utf8");

                    b.Property<string>("TwoLetterIsoCode")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TwoLetterIsoCode"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Country_DisplayOrder");

                    b.ToTable("country", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Crosssellproduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId1")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId2")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("crosssellproduct", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CurrencyCode"), "utf8");

                    b.Property<string>("CustomFormatting")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CustomFormatting"), "utf8");

                    b.Property<string>("DisplayLocale")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DisplayLocale"), "utf8");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Rate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("RoundingTypeId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Currency_DisplayOrder");

                    b.ToTable("currency", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AdminComment")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AdminComment"), "utf8");

                    b.Property<int>("AffiliateId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("int(11)")
                        .HasColumnName("BillingAddress_Id");

                    b.Property<DateTime?>("CannotLoginUntilDateUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CustomerGuid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Email"), "utf8");

                    b.Property<string>("EmailToRevalidate")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EmailToRevalidate"), "utf8");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int(11)");

                    b.Property<bool>("HasShoppingCartItems")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSystemAccount")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastActivityDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("LastIpAddress")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LastIpAddress"), "utf8");

                    b.Property<DateTime?>("LastLoginDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("RegisteredInStoreId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("RequireReLogin")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ShippingAddress_Id");

                    b.Property<string>("SystemName")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SystemName"), "utf8");

                    b.Property<string>("Username")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Username"), "utf8");

                    b.Property<int>("VendorId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ShippingAddressId" }, "IX_5FD07AEA757DD98D3E04CA86906517868F44A287");

                    b.HasIndex(new[] { "BillingAddressId" }, "IX_79820CBB6A38BC446E7FC52E7582A458F3A2AC75");

                    b.HasIndex(new[] { "CreatedOnUtc" }, "IX_Customer_CreatedOnUtc");

                    b.HasIndex(new[] { "CustomerGuid" }, "IX_Customer_CustomerGuid");

                    b.HasIndex(new[] { "Email" }, "IX_Customer_Email");

                    b.HasIndex(new[] { "SystemName" }, "IX_Customer_SystemName");

                    b.HasIndex(new[] { "Username" }, "IX_Customer_Username");

                    b.ToTable("customer", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Customerattribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AttributeControlTypeId")
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("customerattribute", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Customerattributevalue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("CustomerAttributeId")
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerAttributeId" }, "IX_F42BE25FE6DC8F058A887BA1DEFB46198BC8D321");

                    b.ToTable("customerattributevalue", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Customerpassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Password"), "utf8");

                    b.Property<int>("PasswordFormatId")
                        .HasColumnType("int(11)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PasswordSalt"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "IX_154E5C21B851AD9590F318EF6F718DB570DAEFF1");

                    b.ToTable("customerpassword", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Customerrole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DefaultTaxDisplayTypeId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("EnablePasswordLifetime")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FreeShipping")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<bool>("OverrideTaxDisplayType")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PurchasedWithProductId")
                        .HasColumnType("int(11)");

                    b.Property<string>("SystemName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SystemName"), "utf8");

                    b.Property<bool>("TaxExempt")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("customerrole", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Deliverydate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("deliverydate", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("AdminComment")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AdminComment"), "utf8");

                    b.Property<bool>("AppliedToSubCategories")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CouponCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CouponCode"), "utf8");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("DiscountLimitationId")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("DiscountTypeId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCumulative")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LimitationTimes")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("MaximumDiscountAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("MaximumDiscountedQuantity")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<bool>("RequiresCouponCode")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("StartDateUtc")
                        .HasColumnType("datetime");

                    b.Property<bool>("UsePercentage")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("discount", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Discountrequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int(11)");

                    b.Property<string>("DiscountRequirementRuleSystemName")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DiscountRequirementRuleSystemName"), "utf8");

                    b.Property<int?>("InteractionTypeId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DiscountId" }, "IX_B38979C2C3C47F2E4B698BDA6D236ECB9332F896");

                    b.HasIndex(new[] { "ParentId" }, "IX_D506930CC015664811ECD666E873DB3A56442AC7");

                    b.ToTable("discountrequirement", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Discountusagehistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int(11)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DiscountId" }, "IX_8F03BAA695B2105F0748CD33C1C69257A187A6AC");

                    b.HasIndex(new[] { "OrderId" }, "IX_90D4BA0B388CAF5150F27E1D9F2781A06F77284E");

                    b.ToTable("discountusagehistory", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Download", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("ContentType")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ContentType"), "utf8");

                    b.Property<byte[]>("DownloadBinary")
                        .HasColumnType("longblob");

                    b.Property<Guid>("DownloadGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DownloadUrl"), "utf8");

                    b.Property<string>("Extension")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Extension"), "utf8");

                    b.Property<string>("Filename")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Filename"), "utf8");

                    b.Property<bool>("IsNew")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseDownloadUrl")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("download", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Emailaccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DisplayName"), "utf8");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Email"), "utf8");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Host"), "utf8");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Password"), "utf8");

                    b.Property<int>("Port")
                        .HasColumnType("int(11)");

                    b.Property<bool>("UseDefaultCredentials")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Username"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("emailaccount", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Externalauthenticationrecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Email"), "utf8");

                    b.Property<string>("ExternalDisplayIdentifier")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ExternalDisplayIdentifier"), "utf8");

                    b.Property<string>("ExternalIdentifier")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ExternalIdentifier"), "utf8");

                    b.Property<string>("OauthAccessToken")
                        .HasColumnType("longtext")
                        .HasColumnName("OAuthAccessToken")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("OauthAccessToken"), "utf8");

                    b.Property<string>("OauthToken")
                        .HasColumnType("longtext")
                        .HasColumnName("OAuthToken")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("OauthToken"), "utf8");

                    b.Property<string>("ProviderSystemName")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ProviderSystemName"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "IX_6D54D5251B1D23560C6CCB69543958292FE936DC");

                    b.ToTable("externalauthenticationrecord", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsForum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<int>("ForumGroupId")
                        .HasColumnType("int(11)");

                    b.Property<int>("LastPostCustomerId")
                        .HasColumnType("int(11)");

                    b.Property<int>("LastPostId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("LastPostTime")
                        .HasColumnType("datetime");

                    b.Property<int>("LastTopicId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("NumPosts")
                        .HasColumnType("int(11)");

                    b.Property<int>("NumTopics")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ForumGroupId" }, "IX_8DCD3E5EEB323E614072D382CED0FDE15C28A20C");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Forums_Forum_DisplayOrder");

                    b.ToTable("forums_forum", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Forums_Group_DisplayOrder");

                    b.ToTable("forums_group", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IPAddress")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Ipaddress"), "utf8");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Text"), "utf8");

                    b.Property<int>("TopicId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("VoteCount")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "IX_66346A7D2B56A00742967506FC5896A954702923");

                    b.HasIndex(new[] { "TopicId" }, "IX_BB7E36F50844E72B331791A9096CADB5DBFBA6C3");

                    b.ToTable("forums_post", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsPostvote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ForumPostId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsUp")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ForumPostId" }, "IX_CE01D00491CDDF94D755273812C89769B8A6D72D");

                    b.ToTable("forums_postvote", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsPrivatemessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FromCustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeletedByAuthor")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeletedByRecipient")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<int>("ToCustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ForumsPrivatemessages");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ForumId")
                        .HasColumnType("int(11)");

                    b.Property<Guid>("SubscriptionGuid")
                        .HasColumnType("char(36)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "IX_04445AF7F58A268687EF7EFAF57B1E4692C90756");

                    b.HasIndex(new[] { "ForumId" }, "IX_Forums_Subscription_ForumId");

                    b.HasIndex(new[] { "TopicId" }, "IX_Forums_Subscription_TopicId");

                    b.ToTable("forums_subscription", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ForumId")
                        .HasColumnType("int(11)");

                    b.Property<int>("LastPostCustomerId")
                        .HasColumnType("int(11)");

                    b.Property<int>("LastPostId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("LastPostTime")
                        .HasColumnType("datetime");

                    b.Property<int>("NumPosts")
                        .HasColumnType("int(11)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Subject"), "utf8");

                    b.Property<int>("TopicTypeId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("Views")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ForumId" }, "IX_74331CDF3DC43C580490017D2FF9557D66C6AF3C");

                    b.HasIndex(new[] { "CustomerId" }, "IX_DDBC009BDA798D5E86F200A619BAEFEE2780A562");

                    b.ToTable("forums_topic", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Gdprconsent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("DisplayDuringRegistration")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DisplayOnCustomerInfoPage")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Message"), "utf8");

                    b.Property<string>("RequiredMessage")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RequiredMessage"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("gdprconsent", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Gdprlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("ConsentId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<string>("CustomerInfo")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CustomerInfo"), "utf8");

                    b.Property<string>("RequestDetails")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RequestDetails"), "utf8");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("gdprlog", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.GenericAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("CreatedOrUpdatedDateUtc")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedOrUpdatedDateUTC");

                    b.Property<int>("EntityId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Key"), "utf8");

                    b.Property<string>("KeyGroup")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("KeyGroup"), "utf8");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Value"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EntityId", "KeyGroup" }, "IX_GenericAttribute_EntityId_and_KeyGroup");

                    b.ToTable("genericattribute", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Giftcard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("GiftCardCouponCode")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("GiftCardCouponCode"), "utf8");

                    b.Property<int>("GiftCardTypeId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsGiftCardActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecipientNotified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Message"), "utf8");

                    b.Property<int?>("PurchasedWithOrderItemId")
                        .HasColumnType("int(11)");

                    b.Property<string>("RecipientEmail")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RecipientEmail"), "utf8");

                    b.Property<string>("RecipientName")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RecipientName"), "utf8");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SenderEmail"), "utf8");

                    b.Property<string>("SenderName")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SenderName"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PurchasedWithOrderItemId" }, "IX_E753BB83C0D47CD444B41734828D6CE31BDA4547");

                    b.ToTable("giftcard", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Giftcardusagehistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("GiftCardId")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("UsedValue")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("UsedWithOrderId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UsedWithOrderId" }, "IX_2DDA907C9212253D7148AA484EFC08F8DB11DBB9");

                    b.HasIndex(new[] { "GiftCardId" }, "IX_8D5FE9820B51CCB45277D64FC6E52C55CDEB59CF");

                    b.ToTable("giftcardusagehistory", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DefaultCurrencyId")
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("FlagImageFileName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FlagImageFileName"), "utf8");

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LanguageCulture"), "utf8");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Rtl")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UniqueSeoCode")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UniqueSeoCode"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Language_DisplayOrder");

                    b.ToTable("language", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.LocaleStringResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ResourceName"), "utf8");

                    b.Property<string>("ResourceValue")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ResourceValue"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_C902AB0FC6278AB50D88DBAAAE90B40D17CBE388");

                    b.HasIndex(new[] { "ResourceName", "LanguageId" }, "IX_LocaleStringResource");

                    b.ToTable("localestringresource", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Localizedproperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int(11)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)");

                    b.Property<string>("LocaleKey")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LocaleKey"), "utf8");

                    b.Property<string>("LocaleKeyGroup")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LocaleKeyGroup"), "utf8");

                    b.Property<string>("LocaleValue")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LocaleValue"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_DBC6F45E7AB497D690C477A31075255AF97FFBBF");

                    b.ToTable("localizedproperty", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<string>("FullMessage")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FullMessage"), "utf8");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("IpAddress"), "utf8");

                    b.Property<int>("LogLevelId")
                        .HasColumnType("int(11)");

                    b.Property<string>("PageUrl")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PageUrl"), "utf8");

                    b.Property<string>("ReferrerUrl")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ReferrerUrl"), "utf8");

                    b.Property<string>("ShortMessage")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShortMessage"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "IX_E09C290A319BBF71BAEA063D33F45A248F16B85E");

                    b.HasIndex(new[] { "CreatedOnUtc" }, "IX_Log_CreatedOnUtc");

                    b.ToTable("log", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("AllowCustomersToSelectPageSize")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ManuallyPriceRange")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ManufacturerTemplateId")
                        .HasColumnType("int(11)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaDescription"), "utf8");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaKeywords"), "utf8");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaTitle"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("PageSize")
                        .HasColumnType("int(11)");

                    b.Property<string>("PageSizeOptions")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PageSizeOptions"), "utf8");

                    b.Property<int>("PictureId")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("PriceFrom")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("PriceRangeFiltering")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PriceTo")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Manufacturer_DisplayOrder");

                    b.HasIndex(new[] { "LimitedToStores" }, "IX_Manufacturer_LimitedToStores");

                    b.HasIndex(new[] { "SubjectToAcl" }, "IX_Manufacturer_SubjectToAcl");

                    b.ToTable("manufacturer", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Manufacturertemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ViewPath"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("manufacturertemplate", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Measuredimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<decimal>("Ratio")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SystemKeyword"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("measuredimension", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Measureweight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<decimal>("Ratio")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SystemKeyword"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("measureweight", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Messagetemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AttachedDownloadId")
                        .HasColumnType("int(11)");

                    b.Property<string>("BccEmailAddresses")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("BccEmailAddresses"), "utf8");

                    b.Property<string>("Body")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Body"), "utf8");

                    b.Property<int?>("DelayBeforeSend")
                        .HasColumnType("int(11)");

                    b.Property<int>("DelayPeriodId")
                        .HasColumnType("int(11)");

                    b.Property<int>("EmailAccountId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Subject"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("messagetemplate", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Migrationversioninfo", b =>
                {
                    b.Property<DateTime?>("AppliedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<long>("Version")
                        .HasColumnType("bigint(20)");

                    b.HasIndex(new[] { "Version" }, "UC_Version")
                        .IsUnique();

                    b.ToTable("migrationversioninfo", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("AllowComments")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Full")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Full"), "utf8");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaDescription"), "utf8");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaKeywords"), "utf8");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaTitle"), "utf8");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Short")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Short"), "utf8");

                    b.Property<DateTime?>("StartDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Title"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_7F02E3C278A944BE59537727A19FEA3A6855AE27");

                    b.ToTable("news", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.NewsComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("CommentText")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CommentText"), "utf8");

                    b.Property<string>("CommentTitle")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CommentTitle"), "utf8");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NewsItemId")
                        .HasColumnType("int(11)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NewsItemId" }, "IX_4327C9836AB73A3FD882D71C073014C5DF40D484");

                    b.HasIndex(new[] { "StoreId" }, "IX_BDAB1EFC98942D6D41898F6649AC03B2FBDA57E4");

                    b.HasIndex(new[] { "CustomerId" }, "IX_FEA2E6F746138EB2B8393B8661D8A9091FBC9A46");

                    b.ToTable("newscomment", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.NewsLetterSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Email"), "utf8");

                    b.Property<Guid>("NewsLetterSubscriptionGuid")
                        .HasColumnType("char(36)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email", "StoreId" }, "IX_NewsletterSubscription_Email_StoreId");

                    b.ToTable("newslettersubscription", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.NopAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Address1")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Address1"), "utf8");

                    b.Property<string>("Address2")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Address2"), "utf8");

                    b.Property<string>("City")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("City"), "utf8");

                    b.Property<string>("Company")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Company"), "utf8");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int(11)");

                    b.Property<string>("County")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("County"), "utf8");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomAttributes")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CustomAttributes"), "utf8");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Email"), "utf8");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FaxNumber"), "utf8");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FirstName"), "utf8");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LastName"), "utf8");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PhoneNumber"), "utf8");

                    b.Property<int?>("StateProvinceId")
                        .HasColumnType("int(11)");

                    b.Property<string>("ZipPostalCode")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ZipPostalCode"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_0318CCE12D3601D14FD4102212A47D530180466D");

                    b.HasIndex(new[] { "StateProvinceId" }, "IX_4A044E7C99A04BAA49E77199A91412218B24A8C4");

                    b.ToTable("address", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AffiliateId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("AllowStoringCreditCardNumber")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AuthorizationTransactionCode")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AuthorizationTransactionCode"), "utf8");

                    b.Property<string>("AuthorizationTransactionId")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AuthorizationTransactionId"), "utf8");

                    b.Property<string>("AuthorizationTransactionResult")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AuthorizationTransactionResult"), "utf8");

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("int(11)");

                    b.Property<string>("CaptureTransactionId")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CaptureTransactionId"), "utf8");

                    b.Property<string>("CaptureTransactionResult")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CaptureTransactionResult"), "utf8");

                    b.Property<string>("CardCvv2")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CardCvv2"), "utf8");

                    b.Property<string>("CardExpirationMonth")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CardExpirationMonth"), "utf8");

                    b.Property<string>("CardExpirationYear")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CardExpirationYear"), "utf8");

                    b.Property<string>("CardName")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CardName"), "utf8");

                    b.Property<string>("CardNumber")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CardNumber"), "utf8");

                    b.Property<string>("CardType")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CardType"), "utf8");

                    b.Property<string>("CheckoutAttributeDescription")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CheckoutAttributeDescription"), "utf8");

                    b.Property<string>("CheckoutAttributesXml")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CheckoutAttributesXml"), "utf8");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<decimal>("CurrencyRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("CustomOrderNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CustomOrderNumber"), "utf8");

                    b.Property<string>("CustomValuesXml")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CustomValuesXml"), "utf8");

                    b.Property<string>("CustomerCurrencyCode")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CustomerCurrencyCode"), "utf8");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<string>("CustomerIp")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CustomerIp"), "utf8");

                    b.Property<int>("CustomerLanguageId")
                        .HasColumnType("int(11)");

                    b.Property<int>("CustomerTaxDisplayTypeId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MaskedCreditCardNumber")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MaskedCreditCardNumber"), "utf8");

                    b.Property<decimal>("OrderDiscount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("OrderGuid")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("OrderShippingExclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OrderShippingInclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("OrderSubTotalDiscountExclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OrderSubTotalDiscountInclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OrderSubtotalExclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OrderSubtotalInclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OrderTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OrderTotal")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("PaidDateUtc")
                        .HasColumnType("datetime");

                    b.Property<decimal>("PaymentMethodAdditionalFeeExclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("PaymentMethodAdditionalFeeInclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("PaymentMethodSystemName")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PaymentMethodSystemName"), "utf8");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("PickupAddressId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("PickupInStore")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("RedeemedRewardPointsEntryId")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("RefundedAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("RewardPointsHistoryEntryId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int(11)");

                    b.Property<string>("ShippingMethod")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShippingMethod"), "utf8");

                    b.Property<string>("ShippingRateComputationMethodSystemName")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShippingRateComputationMethodSystemName"), "utf8");

                    b.Property<int>("ShippingStatusId")
                        .HasColumnType("int(11)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.Property<string>("SubscriptionTransactionId")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SubscriptionTransactionId"), "utf8");

                    b.Property<string>("TaxRates")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TaxRates"), "utf8");

                    b.Property<string>("VatNumber")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("VatNumber"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RewardPointsHistoryEntryId" }, "FK_E2B3006CB294B6FD2E08E9DB53E7296283CB8A61");

                    b.HasIndex(new[] { "PickupAddressId" }, "IX_0E470D4A2077F13DD52B58146A78BB6D9FF598A3");

                    b.HasIndex(new[] { "ShippingAddressId" }, "IX_30A52D6385B52F71FB5EDB1D893B738E8549DE8B");

                    b.HasIndex(new[] { "CustomerId" }, "IX_D4D583CDFB5B9FA861705763C89DE617044108E3");

                    b.HasIndex(new[] { "BillingAddressId" }, "IX_E7755CC7F881D5026F1484CD9F844657848310FB");

                    b.HasIndex(new[] { "CreatedOnUtc" }, "IX_Order_CreatedOnUtc");

                    b.ToTable("order", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Orderitem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("AttributeDescription")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AttributeDescription"), "utf8");

                    b.Property<string>("AttributesXml")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AttributesXml"), "utf8");

                    b.Property<decimal>("DiscountAmountExclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("DiscountAmountInclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsDownloadActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("ItemWeight")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("LicenseDownloadId")
                        .HasColumnType("int(11)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)");

                    b.Property<Guid>("OrderItemGuid")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("OriginalProductCost")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("PriceExclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("PriceInclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("RentalEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RentalStartDateUtc")
                        .HasColumnType("datetime");

                    b.Property<decimal>("UnitPriceExclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("UnitPriceInclTax")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrderId" }, "IX_01DC8234EFFE848F4BACFA16F95AA7A4EF77375D");

                    b.HasIndex(new[] { "ProductId" }, "IX_25727F4EB701F202F56ABC70D9470E7FB2F2D00B");

                    b.ToTable("orderitem", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.OrderNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<bool>("DisplayToCustomer")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DownloadId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Note"), "utf8");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrderId" }, "IX_467179DFA023725B2181B4EFF2F3C95252D34FB4");

                    b.ToTable("ordernote", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Permissionrecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Category"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SystemName"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("permissionrecord", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("AltAttribute")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AltAttribute"), "utf8");

                    b.Property<bool>("IsNew")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MimeType"), "utf8");

                    b.Property<string>("SeoFilename")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SeoFilename"), "utf8");

                    b.Property<string>("TitleAttribute")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TitleAttribute"), "utf8");

                    b.Property<string>("VirtualPath")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("VirtualPath"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Picture_Id");

                    b.ToTable("picture", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Picturebinary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<byte[]>("BinaryData")
                        .HasColumnType("longblob");

                    b.Property<int>("PictureId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PictureId" }, "IX_E19B7EA10CC9EEDC673118A073359DDDD6E23D5E");

                    b.ToTable("picturebinary", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("AllowGuestsToVote")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowOnHomepage")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("StartDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("SystemKeyword")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SystemKeyword"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_ED22A23331718AB1C4E03DC35EE6CE7A772786E8");

                    b.ToTable("poll", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Pollanswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("NumberOfVotes")
                        .HasColumnType("int(11)");

                    b.Property<int>("PollId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PollId" }, "IX_CEB5FCB66C26383053ECFC887B4B724CEC3DA43A");

                    b.ToTable("pollanswer", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Pollvotingrecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<int>("PollAnswerId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "IX_0076E1ECE40F941D4C0E2C14BFD3E8385771812D");

                    b.HasIndex(new[] { "PollAnswerId" }, "IX_623CFDF34577171DD8C2C47A6F2A473E1BD97E4F");

                    b.ToTable("pollvotingrecord", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Predefinedproductattributevalue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<decimal>("PriceAdjustment")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("PriceAdjustmentUsePercentage")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("WeightAdjustment")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductAttributeId" }, "IX_0B8B35187AF308E8F9D8B2E28B3DA957BE85A5DB");

                    b.ToTable("predefinedproductattributevalue", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<decimal>("AdditionalShippingCharge")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("AdminComment")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AdminComment"), "utf8");

                    b.Property<bool>("AllowAddingOnlyExistingAttributeCombinations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowBackInStockSubscriptions")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowCustomerReviews")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AllowedQuantities")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AllowedQuantities"), "utf8");

                    b.Property<int>("ApprovedRatingSum")
                        .HasColumnType("int(11)");

                    b.Property<int>("ApprovedTotalReviews")
                        .HasColumnType("int(11)");

                    b.Property<bool>("AutomaticallyAddRequiredProducts")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("AvailableEndDateTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<bool>("AvailableForPreOrder")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("AvailableStartDateTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("BackorderModeId")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("BasepriceAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("BasepriceBaseAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("BasepriceBaseUnitId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("BasepriceEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("BasepriceUnitId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("CallForPrice")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<bool>("CustomerEntersPrice")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeliveryDateId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("DisableBuyButton")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DisableWishlistButton")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("DisplayStockAvailability")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DisplayStockQuantity")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DownloadActivationTypeId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("DownloadExpirationDays")
                        .HasColumnType("int(11)");

                    b.Property<int>("DownloadId")
                        .HasColumnType("int(11)");

                    b.Property<string>("FullDescription")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FullDescription"), "utf8");

                    b.Property<int>("GiftCardTypeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Gtin")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Gtin"), "utf8");

                    b.Property<bool>("HasDiscountsApplied")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasSampleDownload")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasTierPrices")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasUserAgreement")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsDownload")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFreeShipping")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGiftCard")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRental")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShipEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTelecommunicationsOrBroadcastingOrElectronicServices")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LowStockActivityId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ManageInventoryMethodId")
                        .HasColumnType("int(11)");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ManufacturerPartNumber"), "utf8");

                    b.Property<bool>("MarkAsNew")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MarkAsNewEndDateTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MarkAsNewStartDateTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("MaxNumberOfDownloads")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("MaximumCustomerEnteredPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaDescription"), "utf8");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaKeywords"), "utf8");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaTitle"), "utf8");

                    b.Property<int>("MinStockQuantity")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("MinimumCustomerEnteredPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("NotApprovedRatingSum")
                        .HasColumnType("int(11)");

                    b.Property<int>("NotApprovedTotalReviews")
                        .HasColumnType("int(11)");

                    b.Property<bool>("NotReturnable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NotifyAdminForQuantityBelow")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("OldPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("OrderMaximumQuantity")
                        .HasColumnType("int(11)");

                    b.Property<int>("OrderMinimumQuantity")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("OverriddenGiftCardAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ParentGroupedProductId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("PreOrderAvailabilityStartDateTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductAvailabilityRangeId")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("ProductCost")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductTemplateId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RecurringCycleLength")
                        .HasColumnType("int(11)");

                    b.Property<int>("RecurringCyclePeriodId")
                        .HasColumnType("int(11)");

                    b.Property<int>("RecurringTotalCycles")
                        .HasColumnType("int(11)");

                    b.Property<int>("RentalPriceLength")
                        .HasColumnType("int(11)");

                    b.Property<int>("RentalPricePeriodId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("RequireOtherProducts")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RequiredProductIds")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RequiredProductIds"), "utf8");

                    b.Property<int>("SampleDownloadId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("ShipSeparately")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShortDescription"), "utf8");

                    b.Property<bool>("ShowOnHomepage")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Sku")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Sku"), "utf8");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int(11)");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TaxCategoryId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("UnlimitedDownloads")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<bool>("UseMultipleWarehouses")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserAgreementText")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UserAgreementText"), "utf8");

                    b.Property<int>("VendorId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("VisibleIndividually")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("Weight")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Deleted", "VendorId", "ProductTypeId", "ManageInventoryMethodId", "MinStockQuantity", "UseMultipleWarehouses" }, "IX_GetLowStockProducts");

                    b.HasIndex(new[] { "Deleted", "Id" }, "IX_Product_Delete_Id");

                    b.HasIndex(new[] { "Published", "Deleted" }, "IX_Product_Deleted_and_Published");

                    b.HasIndex(new[] { "LimitedToStores" }, "IX_Product_LimitedToStores");

                    b.HasIndex(new[] { "ParentGroupedProductId" }, "IX_Product_ParentGroupedProductId");

                    b.HasIndex(new[] { "Price", "AvailableStartDateTimeUtc", "AvailableEndDateTimeUtc", "Published", "Deleted" }, "IX_Product_PriceDatesEtc");

                    b.HasIndex(new[] { "Published" }, "IX_Product_Published");

                    b.HasIndex(new[] { "ShowOnHomepage" }, "IX_Product_ShowOnHomepage");

                    b.HasIndex(new[] { "SubjectToAcl" }, "IX_Product_SubjectToAcl");

                    b.HasIndex(new[] { "VisibleIndividually" }, "IX_Product_VisibleIndividually");

                    b.HasIndex(new[] { "VisibleIndividually", "Published", "Deleted" }, "IX_Product_VisibleIndividually_Published_Deleted_Extended");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Products_DisplayOrder");

                    b.HasIndex(new[] { "Id" }, "IX_Products_Id");

                    b.HasIndex(new[] { "Id", "DisplayOrder" }, "IX_Products_Id_DisplayOrder");

                    b.HasIndex(new[] { "Published", "Deleted", "MarkAsNew" }, "IX_Products_Published_Deleted_MarkAsNew");

                    b.ToTable("product", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Productattribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("productattribute", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductAttributeCombination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("AllowOutOfStockOrders")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AttributesXml")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AttributesXml"), "utf8");

                    b.Property<string>("Gtin")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Gtin"), "utf8");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ManufacturerPartNumber"), "utf8");

                    b.Property<int>("MinStockQuantity")
                        .HasColumnType("int(11)");

                    b.Property<int>("NotifyAdminForQuantityBelow")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("OverriddenPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("PictureId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Sku")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Sku"), "utf8");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_10742F34F6C98BF11B11FBFB350254FBD0802277");

                    b.ToTable("productattributecombination", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Productattributevalue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AssociatedProductId")
                        .HasColumnType("int(11)");

                    b.Property<int>("AttributeValueTypeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("ColorSquaresRgb")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ColorSquaresRgb"), "utf8");

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("CustomerEntersQty")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<int>("ImageSquaresPictureId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("PictureId")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("PriceAdjustment")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("PriceAdjustmentUsePercentage")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductAttributeMappingId")
                        .HasColumnType("int(11)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("WeightAdjustment")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductAttributeMappingId" }, "IX_C8FD7E41BDF864606B567EA54EAAB6219686F356");

                    b.HasIndex(new[] { "ProductAttributeMappingId", "DisplayOrder" }, "IX_ProductAttributeValue_ProductAttributeMappingId_DisplayOrder");

                    b.ToTable("productattributevalue", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Productavailabilityrange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("productavailabilityrange", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsFeaturedProduct")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_65D0E0647344EB198B9C2CE245C24526EA026B04");

                    b.HasIndex(new[] { "ProductId" }, "IX_C069A2C78E4169E39784E2F8D1C8390483CCDC24");

                    b.HasIndex(new[] { "ProductId", "IsFeaturedProduct" }, "IX_PCM_ProductId_Extended");

                    b.HasIndex(new[] { "CategoryId", "ProductId" }, "IX_PCM_Product_and_Category");

                    b.HasIndex(new[] { "IsFeaturedProduct" }, "IX_Product_Category_Mapping_IsFeaturedProduct");

                    b.ToTable("product_category_mapping", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductManufacturerMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsFeaturedProduct")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_4DE2FF87C02296F96D7DA49634AE6719C03E5E06");

                    b.HasIndex(new[] { "ManufacturerId" }, "IX_DABA4762DFE5DDE81827BC9AEBC96E0930755460");

                    b.HasIndex(new[] { "ProductId", "IsFeaturedProduct" }, "IX_PMM_ProductId_Extended");

                    b.HasIndex(new[] { "ManufacturerId", "ProductId" }, "IX_PMM_Product_and_Manufacturer");

                    b.HasIndex(new[] { "IsFeaturedProduct" }, "IX_Product_Manufacturer_Mapping_IsFeaturedProduct");

                    b.ToTable("product_manufacturer_mapping", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductPictureMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<int>("PictureId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_0A76F88D5B36EE11752798CC1AEC887B119395D8");

                    b.HasIndex(new[] { "PictureId" }, "IX_1151378E30052BEAC16DB55D3E56D8D6A857FB02");

                    b.HasIndex(new[] { "Id", "DisplayOrder" }, "IX_Product_Picture_Mapping_Id_DisplayOrder");

                    b.HasIndex(new[] { "PictureId" }, "IX_Product_Picture_Mapping_PictureId");

                    b.HasIndex(new[] { "ProductId" }, "IX_Product_Picture_Mapping_ProductId");

                    b.ToTable("product_picture_mapping", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductProductattributeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AttributeControlTypeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("ConditionAttributeXml")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ConditionAttributeXml"), "utf8");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DefaultValue"), "utf8");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)");

                    b.Property<string>("TextPrompt")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TextPrompt"), "utf8");

                    b.Property<string>("ValidationFileAllowedExtensions")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ValidationFileAllowedExtensions"), "utf8");

                    b.Property<int?>("ValidationFileMaximumSize")
                        .HasColumnType("int(11)");

                    b.Property<int?>("ValidationMaxLength")
                        .HasColumnType("int(11)");

                    b.Property<int?>("ValidationMinLength")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductAttributeId" }, "IX_47FA8F827F33CA5D7C889B64078C36A49F6790A6");

                    b.HasIndex(new[] { "ProductId" }, "IX_F6226437D41700C3BDEDDE266458E52BCE9E3715");

                    b.HasIndex(new[] { "ProductId", "DisplayOrder" }, "IX_Product_ProductAttribute_Mapping_ProductId_DisplayOrder");

                    b.ToTable("product_productattribute_mapping", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Productreview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("CustomerNotifiedOfReply")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("HelpfulNoTotal")
                        .HasColumnType("int(11)");

                    b.Property<int>("HelpfulYesTotal")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)");

                    b.Property<int>("Rating")
                        .HasColumnType("int(11)");

                    b.Property<string>("ReplyText")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ReplyText"), "utf8");

                    b.Property<string>("ReviewText")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ReviewText"), "utf8");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Title"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "IX_34DF548025246734401C64D1904FDC5119A405CC");

                    b.HasIndex(new[] { "ProductId" }, "IX_C3A2EB2CAD92A0F3C47CCA524FD2848BC0026B81");

                    b.HasIndex(new[] { "StoreId" }, "IX_CCA2A4F066E9F5700F1C5792E4F4D96B78E887D6");

                    b.ToTable("productreview", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Productreviewhelpfulness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductReviewId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("WasHelpful")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductReviewId" }, "IX_7528780A72E711ED59C639ABE6F5E79394EFC9C8");

                    b.ToTable("productreviewhelpfulness", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductreviewReviewtypeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductReviewId")
                        .HasColumnType("int(11)");

                    b.Property<int>("Rating")
                        .HasColumnType("int(11)");

                    b.Property<int>("ReviewTypeId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ReviewTypeId" }, "IX_A80FB7B7F056FCA6FF7011C07E1DF0DB21DD2723");

                    b.HasIndex(new[] { "ProductReviewId" }, "IX_E6BD958D6D6A3B595249B1F2FB2836558198DBD6");

                    b.ToTable("productreview_reviewtype_mapping", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductSpecificationattributeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("AllowFiltering")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("AttributeTypeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("CustomValue")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CustomValue"), "utf8");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("ShowOnProductPage")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SpecificationAttributeOptionId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_6E3598F36D97BFA8D2B1DA6A2D670FA36334106B");

                    b.HasIndex(new[] { "SpecificationAttributeOptionId" }, "IX_EE669865DEDFD7AEFB45F2F89EF1E442329254F3");

                    b.HasIndex(new[] { "AllowFiltering" }, "IX_PSAM_AllowFiltering");

                    b.HasIndex(new[] { "SpecificationAttributeOptionId", "AllowFiltering" }, "IX_PSAM_SpecificationAttributeOptionId_AllowFiltering");

                    b.ToTable("product_specificationattribute_mapping", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ProductTag_Name");

                    b.ToTable("producttag", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Producttemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("IgnoredProductTypes")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("IgnoredProductTypes"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ViewPath"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("producttemplate", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Productwarehouseinventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ReservedQuantity")
                        .HasColumnType("int(11)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int(11)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_194D2A5B9EF87F154B5DD69A1834FAFCDD487B94");

                    b.HasIndex(new[] { "WarehouseId" }, "IX_D53A72DA5744EF523A405436021498998DDFABEA");

                    b.ToTable("productwarehouseinventory", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Queuedemail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AttachedDownloadId")
                        .HasColumnType("int(11)");

                    b.Property<string>("AttachmentFileName")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AttachmentFileName"), "utf8");

                    b.Property<string>("AttachmentFilePath")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AttachmentFilePath"), "utf8");

                    b.Property<string>("Bcc")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Bcc"), "utf8");

                    b.Property<string>("Body")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Body"), "utf8");

                    b.Property<string>("Cc")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CC")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Cc"), "utf8");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DontSendBeforeDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("EmailAccountId")
                        .HasColumnType("int(11)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("From"), "utf8");

                    b.Property<string>("FromName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FromName"), "utf8");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int(11)");

                    b.Property<string>("ReplyTo")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ReplyTo"), "utf8");

                    b.Property<string>("ReplyToName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ReplyToName"), "utf8");

                    b.Property<DateTime?>("SentOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("SentTries")
                        .HasColumnType("int(11)");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Subject"), "utf8");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("To"), "utf8");

                    b.Property<string>("ToName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ToName"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmailAccountId" }, "IX_EADE912948B576BF4259B7C4050DC339A54F63AE");

                    b.HasIndex(new[] { "CreatedOnUtc" }, "IX_QueuedEmail_CreatedOnUtc");

                    b.HasIndex(new[] { "SentOnUtc", "DontSendBeforeDateUtc" }, "IX_QueuedEmail_SentOnUtc_DontSendBeforeDateUtc_Extended");

                    b.ToTable("queuedemail", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.RecurringPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CycleLength")
                        .HasColumnType("int(11)");

                    b.Property<int>("CyclePeriodId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("InitialOrderId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LastPaymentFailed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("TotalCycles")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "InitialOrderId" }, "IX_BE0E46A4D4C7979A25335958B1321179F95A9263");

                    b.ToTable("recurringpayment", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Recurringpaymenthistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)");

                    b.Property<int>("RecurringPaymentId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RecurringPaymentId" }, "IX_F15784D9E7C2AA49EAB3905620E308A649587B16");

                    b.ToTable("recurringpaymenthistory", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Relatedproduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId1")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId2")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId1" }, "IX_RelatedProduct_ProductId1");

                    b.ToTable("relatedproduct", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ReturnRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomNumber")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CustomNumber"), "utf8");

                    b.Property<string>("CustomerComments")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CustomerComments"), "utf8");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int(11)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)");

                    b.Property<string>("ReasonForReturn")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ReasonForReturn"), "utf8");

                    b.Property<string>("RequestedAction")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RequestedAction"), "utf8");

                    b.Property<int>("ReturnRequestStatusId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ReturnedQuantity")
                        .HasColumnType("int(11)");

                    b.Property<string>("StaffNotes")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("StaffNotes"), "utf8");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("UploadedFileId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "IX_6111E95274ADB34D717DB9F3FF6270CEC853028C");

                    b.ToTable("returnrequest", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Returnrequestaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("returnrequestaction", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Returnrequestreason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("returnrequestreason", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Reviewtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<bool>("VisibleToAllCustomers")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("reviewtype", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Rewardpointshistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Message"), "utf8");

                    b.Property<int>("Points")
                        .HasColumnType("int(11)");

                    b.Property<int?>("PointsBalance")
                        .HasColumnType("int(11)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("UsedAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("UsedWithOrder")
                        .HasColumnType("char(36)");

                    b.Property<int?>("ValidPoints")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "IX_60F9BB409B5074CAA77093426EBEF6A510194A0A");

                    b.ToTable("rewardpointshistory", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Scheduletask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastEnabledUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastEndUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastStartUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastSuccessUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("Seconds")
                        .HasColumnType("int(11)");

                    b.Property<bool>("StopOnError")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("scheduletask", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Searchterm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("Count")
                        .HasColumnType("int(11)");

                    b.Property<string>("Keyword")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Keyword"), "utf8");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("searchterm", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("AdminComment")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AdminComment"), "utf8");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeliveryDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("ReadyForPickupDateUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ShippedDateUtc")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("TotalWeight")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TrackingNumber"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrderId" }, "IX_D7D61795361B29A6E41BFFB60A36B99CE2E77A50");

                    b.ToTable("shipment", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Shipmentitem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int(11)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int(11)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ShipmentId" }, "IX_80E4CFA78264430E212118ECB894E1B81E813243");

                    b.ToTable("shipmentitem", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Shippingmethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("shippingmethod", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Shoppingcartitem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("AttributesXml")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AttributesXml"), "utf8");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<decimal>("CustomerEnteredPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("RentalEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RentalStartDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("ShoppingCartTypeId")
                        .HasColumnType("int(11)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_874149FC8129BC9A477567717104BF5951801611");

                    b.HasIndex(new[] { "CustomerId" }, "IX_F59371B91ADC899F64B183252FFDAD65F99A60B0");

                    b.HasIndex(new[] { "ShoppingCartTypeId", "CustomerId" }, "IX_ShoppingCartItem_ShoppingCartTypeId_CustomerId");

                    b.ToTable("shoppingcartitem", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Specificationattribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int?>("SpecificationAttributeGroupId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SpecificationAttributeGroupId" }, "IX_A448A454CD518AB0B594506AF5062542BBA79170");

                    b.ToTable("specificationattribute", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Specificationattributegroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("specificationattributegroup", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Specificationattributeoption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("ColorSquaresRgb")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ColorSquaresRgb"), "utf8");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("SpecificationAttributeId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SpecificationAttributeId" }, "IX_20CA206E1041B61FFB1739DEAB2C2134475DBA4B");

                    b.ToTable("specificationattributeoption", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.StateProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Abbreviation"), "utf8");

                    b.Property<int>("CountryId")
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_B5D25FF62BAA11CE55190C311232C49C9C3206C8");

                    b.ToTable("stateprovince", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Stockquantityhistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int?>("CombinationId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Message"), "utf8");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)");

                    b.Property<int>("QuantityAdjustment")
                        .HasColumnType("int(11)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int(11)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_52918ED84971F1AC2192FABA83628A7DB4AE9BCD");

                    b.ToTable("stockquantityhistory", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CompanyAddress"), "utf8");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CompanyName"), "utf8");

                    b.Property<string>("CompanyPhoneNumber")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CompanyPhoneNumber"), "utf8");

                    b.Property<string>("CompanyVat")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CompanyVat"), "utf8");

                    b.Property<int>("DefaultLanguageId")
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Hosts")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Hosts"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<bool>("SslEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Url"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Hosts" }, "IX_Store_Hosts");

                    b.HasIndex(new[] { "Id" }, "IX_Store_Id");

                    b.ToTable("store", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Storemapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int(11)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EntityName"), "utf8");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StoreId" }, "IX_FC249F594D98DD91961F5A358D8544703BE6E138");

                    b.HasIndex(new[] { "EntityId", "EntityName" }, "IX_StoreMapping_EntityId_EntityName");

                    b.HasIndex(new[] { "EntityName" }, "IX_StoreMapping_EntityName");

                    b.HasIndex(new[] { "EntityName", "StoreId" }, "IX_StoreMapping_EntityName_StoreId");

                    b.ToTable("storemapping", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Taxcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("taxcategory", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Tierprice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int?>("CustomerRoleId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("EndDateTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("StartDateTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_231B5005C419BF705692EE4AB5BBEF7EFFA20935");

                    b.HasIndex(new[] { "CustomerRoleId" }, "IX_D7FF9897F12FC9DE46D1D9AA52049475E05C6946");

                    b.ToTable("tierprice", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("AccessibleWhenStoreClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Body")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Body"), "utf8");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IncludeInFooterColumn1")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IncludeInFooterColumn2")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IncludeInFooterColumn3")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IncludeInSitemap")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IncludeInTopMenu")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPasswordProtected")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaDescription"), "utf8");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaKeywords"), "utf8");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaTitle"), "utf8");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Password"), "utf8");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SystemName")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SystemName"), "utf8");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Title"), "utf8");

                    b.Property<int>("TopicTemplateId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("topic", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Topictemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ViewPath"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("topictemplate", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.UrlRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int(11)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EntityName"), "utf8");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Slug"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EntityId", "EntityName", "LanguageId", "IsActive" }, "IX_UrlRecord_Custom_1");

                    b.HasIndex(new[] { "Slug" }, "IX_UrlRecord_Slug");

                    b.ToTable("urlrecord", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int(11)");

                    b.Property<string>("AdminComment")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AdminComment"), "utf8");

                    b.Property<bool>("AllowCustomersToSelectPageSize")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Email")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Email"), "utf8");

                    b.Property<bool>("ManuallyPriceRange")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaDescription"), "utf8");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaKeywords"), "utf8");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MetaTitle"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("PageSize")
                        .HasColumnType("int(11)");

                    b.Property<string>("PageSizeOptions")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PageSizeOptions"), "utf8");

                    b.Property<int>("PictureId")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("PriceFrom")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("PriceRangeFiltering")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PriceTo")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("vendor", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Vendorattribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AttributeControlTypeId")
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("vendorattribute", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.VendorAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("VendorAttributeId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "VendorAttributeId" }, "IX_C4D5E3F596710165FA89CD9C228D835174B8CB35");

                    b.ToTable("vendorattributevalue", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Vendornote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Note"), "utf8");

                    b.Property<int>("VendorId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "VendorId" }, "IX_5E01CCC29E29B4FBD22AD8195385ACD1130C2A47");

                    b.ToTable("vendornote", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int(11)");

                    b.Property<string>("AdminComment")
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AdminComment"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("warehouse", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Preepex.Core.Domain.NopEntities.ProductProducttagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductTagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductProducttagMappings");
                });

            modelBuilder.Entity("ProductProductTagMapping", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Product_Id");

                    b.Property<int>("ProductTagId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ProductTag_Id");

                    b.HasKey("ProductId", "ProductTagId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ProductTagId" }, "IX_5A62FE7519887322703971B07D62C2648D56BDEB");

                    b.HasIndex(new[] { "ProductId" }, "IX_5F850DC84A298A0021177DFFE6DA6AF5A8BA529D");

                    b.ToTable("product_producttag_mapping", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("StoreId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(6000)
                        .HasColumnType("varchar(6000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Value"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("setting", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Shippingmethodrestriction", b =>
                {
                    b.Property<int>("ShippingMethodId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ShippingMethod_Id");

                    b.Property<int>("CountryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Country_Id");

                    b.HasKey("ShippingMethodId", "CountryId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CountryId" }, "IX_98FECBA712EC3A7AF759C110137BABE6423115BA");

                    b.HasIndex(new[] { "ShippingMethodId" }, "IX_A67E057E4259D823DFDB3A4FFFBDC22F9FF88570");

                    b.ToTable("shippingmethodrestrictions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("Customeraddress", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.NopAddress", null)
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_064BBFC7F1E99C0ED3D657525AE15DA159D70620");

                    b.HasOne("Preepex.Core.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_0F795F0113618C1C09AB3006FE2F60B1A6944715");
                });

            modelBuilder.Entity("CustomerCustomerroleMapping", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_3AF7ACA7000EF570E199461C6C515E70C39F4552");

                    b.HasOne("Preepex.Core.Domain.Entities.Customerrole", null)
                        .WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_7504842FB70DA1F50CB3020CCAA1A16761844930");
                });

            modelBuilder.Entity("DiscountAppliedtocategory", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_1E8AF1DCDE521B9D937B2D874B129B29FEB8DDAC");

                    b.HasOne("Preepex.Core.Domain.Entities.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_B6FF88EE52D1B8CF5AD39B89DD423087F31EF926");
                });

            modelBuilder.Entity("DiscountAppliedtomanufacturer", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EFCF44DF95BE2B0F44BEA91EC938BF273306EDB9");

                    b.HasOne("Preepex.Core.Domain.Entities.Manufacturer", null)
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_564C8660DF6324A92D75E78AF27F35F2B4C5EC55");
                });

            modelBuilder.Entity("DiscountAppliedtoproduct", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_7D5CB645FED1479E6A6CCFEECEC64D3EF834A9A0");

                    b.HasOne("Preepex.Core.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_93CBDED2C39FEA8DC8E0DDD9F6CDA0BB3009BBE2");
                });

            modelBuilder.Entity("PermissionrecordRoleMapping", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customerrole", null)
                        .WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_C53044341A77570833FA078A242CC1D44427DF98");

                    b.HasOne("Preepex.Core.Domain.Entities.Permissionrecord", null)
                        .WithMany()
                        .HasForeignKey("PermissionRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_0D64D72F00FE64AEE0028D9D79117C3549742A4A");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Aclrecord", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customerrole", "CustomerRole")
                        .WithMany("AclRecord")
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_18CE6CF7C1E595B8B220F8AF48B3962462E2EBE4");

                    b.Navigation("CustomerRole");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Activitylog", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Activitylogtype", "ActivityLogType")
                        .WithMany("ActivityLog")
                        .HasForeignKey("ActivityLogTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_8551690BAD0612277F033FE5E6CDBE7AF8081FEF");

                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("Activitylog")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_2DD54D1D705AD51551F0186C93A2A42C1F28D2D4");

                    b.Navigation("ActivityLogType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Addressattributevalue", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Addressattribute", "AddressAttribute")
                        .WithMany("Addressattributevalue")
                        .HasForeignKey("AddressAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_5DFD07C8B3933393557F2405C5D030F722C1A875");

                    b.Navigation("AddressAttribute");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Affiliate", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.NopAddress", "Address")
                        .WithMany("Affiliate")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_C51A67BAE50631F2EB05D8C998FE9011BF3C61D1");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Backinstocksubscription", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("BackinStockSubScription")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_F8D6542EEF866E6F82330F20D425F73C0028C795");

                    b.HasOne("Preepex.Core.Domain.Entities.Product", "Product")
                        .WithMany("Backinstocksubscription")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_3E102F467AD07EB3F3CF488469F7331357BC9427");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.BlogComment", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Blogpost", "BlogPost")
                        .WithMany("BlogComment")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_333E84178EA6FDC1566C9E6608062ACFC2D190D6");

                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("BlogComment")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BB933E46C0D270FC1CDCFE5DE7017062B9FBA6D8");

                    b.HasOne("Preepex.Core.Domain.Entities.Store", "Store")
                        .WithMany("BlogComment")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_045A4462BB2CA5D4CEB9E9E4DC132EB6425CD61E");

                    b.Navigation("BlogPost");

                    b.Navigation("Customer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Blogpost", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Language", "Language")
                        .WithMany("BlogPost")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_4F3EC139C71EE09A13DC8A6D5E45C2DE2D45083B");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Checkoutattributevalue", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Checkoutattribute", "CheckoutAttribute")
                        .WithMany("CheckoutAttributeValue")
                        .HasForeignKey("CheckoutAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_39ED1A2F060FE6EA243A9F346D19141E78557CEF");

                    b.Navigation("CheckoutAttribute");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Customerattributevalue", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customerattribute", "CustomerAttribute")
                        .WithMany("Customerattributevalue")
                        .HasForeignKey("CustomerAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_4474216C35CE12F76B30AF73EF8A00B2F3AB3B4B");

                    b.Navigation("CustomerAttribute");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Customerpassword", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerPassword")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_3F5D9E19DD3A95CBEB5BF9DAE373649821E78118");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Discountrequirement", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Discount", "Discount")
                        .WithMany("DiscountRequirement")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CC430D8FE7C0BA15E476A441BE81D06D70036F64");

                    b.HasOne("Preepex.Core.Domain.Entities.Discountrequirement", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_FC331213C8E673A5CE279CCA6FC0EA1A866F84DA");

                    b.Navigation("Discount");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Discountusagehistory", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Discount", "Discount")
                        .WithMany("DiscountUsageHistory")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_4337BE245B284E482FE1618865020385A32DA5DA");

                    b.HasOne("Preepex.Core.Domain.Entities.Order", "Order")
                        .WithMany("DiscountusageHistory")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_56A8F184BCDD3C62383C40A4DA0A8CC6D7DF410E");

                    b.Navigation("Discount");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Externalauthenticationrecord", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("ExternalAuthenticationRecord")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_2458463D1AFE870AD994BD021E2945C51043E21A");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsForum", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.ForumsGroup", "ForumGroup")
                        .WithMany("ForumsForum")
                        .HasForeignKey("ForumGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_5A81CFDC46FB89F476AB1E0DD13C84674C8BC543");

                    b.Navigation("ForumGroup");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsPost", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("ForumsPost")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_A7D98402C554C30878C8B0E57C993907C4D67A41");

                    b.HasOne("Preepex.Core.Domain.Entities.ForumsTopic", "Topic")
                        .WithMany("ForumsPost")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_0ECAB22A168D661B9BAF8FEE2C7494FA4964DD5B");

                    b.Navigation("Customer");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsPostvote", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.ForumsPost", "ForumPost")
                        .WithMany("ForumsPostvote")
                        .HasForeignKey("ForumPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_9E6F504193082B61F109F7677B2872C88DAB25F6");

                    b.Navigation("ForumPost");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsSubscription", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("ForumsSubscription")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_B6A36BE342942CA0918650A40C2D37BE280AD924");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsTopic", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("ForumsTopic")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_6F76917A376ADA1D26A859EB432614D01D09E35E");

                    b.HasOne("Preepex.Core.Domain.Entities.ForumsForum", "Forum")
                        .WithMany("ForumsTopic")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_3ED69F7FA84C66C0D0686663F4A248E95B5D0838");

                    b.Navigation("Customer");

                    b.Navigation("Forum");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Giftcard", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Orderitem", "PurchasedWithOrderItem")
                        .WithMany("GiftCard")
                        .HasForeignKey("PurchasedWithOrderItemId")
                        .HasConstraintName("FK_935F8066DDB55926E9F6AFB38FBBB44A64ECA16A");

                    b.Navigation("PurchasedWithOrderItem");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Giftcardusagehistory", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Giftcard", "GiftCard")
                        .WithMany("GiftCardUsageHistory")
                        .HasForeignKey("GiftCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ED90642156040A790AA6E46DCE79BF8D427A92D8");

                    b.HasOne("Preepex.Core.Domain.Entities.Order", "UsedWithOrder")
                        .WithMany("GiftCardUsageHistory")
                        .HasForeignKey("UsedWithOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_551F5B6F0B00C29A799CD5800A370F1655ED9003");

                    b.Navigation("GiftCard");

                    b.Navigation("UsedWithOrder");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.LocaleStringResource", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Language", "Language")
                        .WithMany("LocaleStringResource")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_5F4DC94AD6BF19DAF5DA0D0F355CEC1E52105386");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Localizedproperty", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Language", "Language")
                        .WithMany("LocalizedProperty")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_932362CA64AD0D6AD865A5D52A15E822B0AD18FF");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Log", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("Log")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_998C3D4780A37B0091EE9A5FD9833132BE830632");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.News", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Language", "Language")
                        .WithMany("News")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_283F6E44D54B41A8A004E82360272E30DEC0D93F");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.NewsComment", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("NewsComment")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_A3BDA22EA8A19B4751F74312AA85045E9875DD39");

                    b.HasOne("Preepex.Core.Domain.Entities.News", "NewsItem")
                        .WithMany("NewsComment")
                        .HasForeignKey("NewsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_5F6C63D8C97ACC6EBD102F74FBBA03291B4DE766");

                    b.HasOne("Preepex.Core.Domain.Entities.Store", "Store")
                        .WithMany("NewsComment")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_A9DBDF3CEE0A841A768F46F42CE0A09EAE3D6968");

                    b.Navigation("Customer");

                    b.Navigation("NewsItem");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.NopAddress", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Country", "Country")
                        .WithMany("Address")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_74D54DABCE4697ED8454CF2984F1C8F3460EE9BF");

                    b.HasOne("Preepex.Core.Domain.Entities.StateProvince", "StateProvince")
                        .WithMany("Address")
                        .HasForeignKey("StateProvinceId")
                        .HasConstraintName("FK_BF8E79E1F90FEA20DEEFE50550E5CB9052C5D951");

                    b.Navigation("Country");

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Order", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.NopAddress", "BillingAddress")
                        .WithMany("OrderBillingAddress")
                        .HasForeignKey("BillingAddressId")
                        .IsRequired()
                        .HasConstraintName("FK_DF57B77161942EFD6C557438EC3BD730AEE345C5");

                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_B82AF61EE7639593EB7CB9A1319FBE9B4AF6F1FC");

                    b.HasOne("Preepex.Core.Domain.Entities.NopAddress", "PickupAddress")
                        .WithMany("OrderPickupAddress")
                        .HasForeignKey("PickupAddressId")
                        .HasConstraintName("FK_BCC8B18340C4EB00FC90C8D29C95ACF8931B21FE");

                    b.HasOne("Preepex.Core.Domain.Entities.Rewardpointshistory", "RewardPointsHistoryEntry")
                        .WithMany("Order")
                        .HasForeignKey("RewardPointsHistoryEntryId")
                        .HasConstraintName("FK_E2B3006CB294B6FD2E08E9DB53E7296283CB8A61");

                    b.HasOne("Preepex.Core.Domain.Entities.NopAddress", "ShippingAddress")
                        .WithMany("OrderShippingAddress")
                        .HasForeignKey("ShippingAddressId")
                        .HasConstraintName("FK_59EADEB3B701B43B0BEDBFEEEDC0597834BE77D5");

                    b.Navigation("BillingAddress");

                    b.Navigation("Customer");

                    b.Navigation("PickupAddress");

                    b.Navigation("RewardPointsHistoryEntry");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Orderitem", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Order", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_3F98C065AAC22F3BC70A69B862886677F0A7104B");

                    b.HasOne("Preepex.Core.Domain.Entities.Product", "Product")
                        .WithMany("Orderitem")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AC4D982F947AEF7F6B0F4170F1A85A2E086EAD32");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.OrderNote", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Order", "Order")
                        .WithMany("OrderNote")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_748F6F5F04127871B1C2DCBB79259D6B69E20F77");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Picturebinary", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Picture", "Picture")
                        .WithMany("PictureBinary")
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_6532A760FDE22EF02E68F5243C97637AD8ECDE49");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Poll", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Language", "Language")
                        .WithMany("Poll")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_4402D073D3F739D18A5C2BE1F959679011669270");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Pollanswer", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Poll", "Poll")
                        .WithMany("Pollanswer")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_68084325B1805F58E241D6E0799C6B6567D1C70F");

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Pollvotingrecord", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("PollvotingRecord")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_77B1EB3129F0FAF02D99199E41A4F8186AF91590");

                    b.HasOne("Preepex.Core.Domain.Entities.Pollanswer", "PollAnswer")
                        .WithMany("Pollvotingrecord")
                        .HasForeignKey("PollAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_188D6A061E1F8C173E252F0D31485D5467297023");

                    b.Navigation("Customer");

                    b.Navigation("PollAnswer");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Predefinedproductattributevalue", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Productattribute", "ProductAttribute")
                        .WithMany("PredeFinedProductAttributeValue")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_0C60532AE4C442823711F67F98C40D27BCA2F59C");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductAttributeCombination", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Product", "Product")
                        .WithMany("Productattributecombination")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DDD3F3C6C485CBBF9F6ABD2C9E8A795D249343A8");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Productattributevalue", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.ProductProductattributeMapping", "ProductAttributeMapping")
                        .WithMany("Productattributevalue")
                        .HasForeignKey("ProductAttributeMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_8E53C9EE981897428A0481B22AB19DC3EA908F05");

                    b.Navigation("ProductAttributeMapping");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Category", "Category")
                        .WithMany("ProductCategoryMapping")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_073BBE7E6F5507EB5B5F0F297A38DB14FB382AE9");

                    b.HasOne("Preepex.Core.Domain.Entities.Product", "Product")
                        .WithMany("ProductCategoryMapping")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_F95DA02385C247415A37EE6ED15A49BC3E462864");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductManufacturerMapping", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("ProductManufacturerMapping")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_80E3F417D8B858D1DE96A4A7A04DCE0700F8B9A3");

                    b.HasOne("Preepex.Core.Domain.Entities.Product", "Product")
                        .WithMany("ProductManufacturerMapping")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_18E35C063DE3F9DD5BDF711CE1519DD90E39B63C");

                    b.Navigation("Manufacturer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductPictureMapping", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Picture", "Picture")
                        .WithMany("ProductPictureMapping")
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EC3B5E9AF7965B2A51DC73A0B47AC0FAB063E572");

                    b.HasOne("Preepex.Core.Domain.Entities.Product", "Product")
                        .WithMany("ProductPictureMapping")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_D73027800FBCA0976B3664AA2B14624AA6A04706");

                    b.Navigation("Picture");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductProductattributeMapping", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Productattribute", "ProductAttribute")
                        .WithMany("ProductProductattributeMapping")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CB9C37622581D2B6F728E49884CDE88E4165F79C");

                    b.HasOne("Preepex.Core.Domain.Entities.Product", "Product")
                        .WithMany("ProductProductattributeMapping")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BF77199B4E9AA217913E748D643B23876607F875");

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Productreview", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("ProductReview")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_3C690095715D0BF8984649454E1A36AE5864B9B9");

                    b.HasOne("Preepex.Core.Domain.Entities.Product", "Product")
                        .WithMany("Productreview")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_8F287941FE06F0E785170933128CFB1FFD7D4337");

                    b.HasOne("Preepex.Core.Domain.Entities.Store", "Store")
                        .WithMany("ProductReview")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_D161A45B1C012B5355F826D126E9F6EE3638C54B");

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Productreviewhelpfulness", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Productreview", "ProductReview")
                        .WithMany("Productreviewhelpfulness")
                        .HasForeignKey("ProductReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_4FC0063973C0BF85F76DA15A03640604649565FF");

                    b.Navigation("ProductReview");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductreviewReviewtypeMapping", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Productreview", "ProductReview")
                        .WithMany("ProductreviewReviewtypeMapping")
                        .HasForeignKey("ProductReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_9F3C938A74BB9514AF74BE9BAD599F8309F47C5D");

                    b.HasOne("Preepex.Core.Domain.Entities.Reviewtype", "ReviewType")
                        .WithMany("ProductreviewReviewtypeMapping")
                        .HasForeignKey("ReviewTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_E8B0BE63569CE2E60AE1B1E50FE527E0E195C439");

                    b.Navigation("ProductReview");

                    b.Navigation("ReviewType");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductSpecificationattributeMapping", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Product", "Product")
                        .WithMany("ProductSpecificationattributeMapping")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_867782688814CFB630157CD09220E35E6729D479");

                    b.HasOne("Preepex.Core.Domain.Entities.Specificationattributeoption", "SpecificationAttributeOption")
                        .WithMany("ProductSpecificationAttributeMapping")
                        .HasForeignKey("SpecificationAttributeOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_066E0888389D7DFD2BA85BCB218CDA1F5B577540");

                    b.Navigation("Product");

                    b.Navigation("SpecificationAttributeOption");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Productwarehouseinventory", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Product", "Product")
                        .WithMany("Productwarehouseinventory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_2120EF95AE859D188A03335EFD782A551C98613B");

                    b.HasOne("Preepex.Core.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("ProductWarehouseInventory")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_62F3117088899BC46531C64816CB0526AEE29017");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Queuedemail", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Emailaccount", "EmailAccount")
                        .WithMany("QueuedEmail")
                        .HasForeignKey("EmailAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_1B62499F76869C0810A8F3A176F7658DB37DAB4A");

                    b.Navigation("EmailAccount");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.RecurringPayment", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Order", "InitialOrder")
                        .WithMany("RecurringPayment")
                        .HasForeignKey("InitialOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_1AA4E6EB7D08262CA4702B6F3693FAF24973E60A");

                    b.Navigation("InitialOrder");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Recurringpaymenthistory", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.RecurringPayment", "RecurringPayment")
                        .WithMany("RecurringPaymentHistory")
                        .HasForeignKey("RecurringPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_28C0076175DB569AD6CA81CB2E7BFFFE04AD0A03");

                    b.Navigation("RecurringPayment");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ReturnRequest", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("ReturnRequest")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AD4A43CA98A319E62AB648C84A660386E3E2962D");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Rewardpointshistory", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("RewardPointsHistory")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_18FE24AC76D8CA88D3890A2915666335388BF06B");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Order", "Order")
                        .WithMany("Shipment")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_D2D2913CAD954BFA003ED2AE92ED646226393F61");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Shipmentitem", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Shipment", "Shipment")
                        .WithMany("ShipmentItem")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_18C8746C96E44FC1E3789352C0630584E6D6D096");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Shoppingcartitem", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customer", "Customer")
                        .WithMany("ShoppingCartItem")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_71A82F96A45513FC75E7FE9D5D67F07A5FAFE1CF");

                    b.HasOne("Preepex.Core.Domain.Entities.Product", "Product")
                        .WithMany("Shoppingcartitem")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_F181ACB6395A22D53CA62D12693DA9ED42583B64");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Specificationattribute", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Specificationattributegroup", "SpecificationAttributeGroup")
                        .WithMany("SpecificationAttribute")
                        .HasForeignKey("SpecificationAttributeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_87B01C9358C3462DE4ABBD3B9A71A65FD52D531E");

                    b.Navigation("SpecificationAttributeGroup");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Specificationattributeoption", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Specificationattribute", "SpecificationAttribute")
                        .WithMany("SpecificationAttributeOption")
                        .HasForeignKey("SpecificationAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_A5ED789CA87B66B039B80950B073C05474673047");

                    b.Navigation("SpecificationAttribute");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.StateProvince", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Country", "Country")
                        .WithMany("StateProvince")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_2BD698F1D0EEAFE0EC514A1BA4B53D34427C2478");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Stockquantityhistory", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Product", "Product")
                        .WithMany("Stockquantityhistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_81B360FE895B708886E24D3D34BBCB856549CA60");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Storemapping", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Store", "Store")
                        .WithMany("StoreMapping")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_2FB439EFF2DAF1A6ACA92AD5255B9C574469C71C");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Tierprice", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Customerrole", "CustomerRole")
                        .WithMany("Tierprice")
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_B8EEC67C511E2BA65F0008D2F7E151565F226B42");

                    b.HasOne("Preepex.Core.Domain.Entities.Product", "Product")
                        .WithMany("Tierprice")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_004281468E56AE8F2C879D1F25BA88F86D67437A");

                    b.Navigation("CustomerRole");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.VendorAttributeValue", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Vendorattribute", "VendorAttribute")
                        .WithMany("VendorAttributeValue")
                        .HasForeignKey("VendorAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_77C5985CFDA88F9F771740B14E7CBAFDE3555D4E");

                    b.Navigation("VendorAttribute");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Vendornote", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Vendor", "Vendor")
                        .WithMany("VendorNote")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_24375B9B78673F3D7469961D1A4A30B72296B359");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Preepex.Core.Domain.NopEntities.ProductProducttagMapping", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Product", null)
                        .WithMany("ProductProductTagMapping")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProductTagMapping", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_2F97322CE12E6881AE559D240E0CF60647E33676");

                    b.HasOne("Preepex.Core.Domain.Entities.ProductTag", null)
                        .WithMany()
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_109FC058A5577EEB67D2F3A876A4269E693BEDA8");
                });

            modelBuilder.Entity("Shippingmethodrestriction", b =>
                {
                    b.HasOne("Preepex.Core.Domain.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_E0136F2DC41B921F877F72C01FC84164E48C494D");

                    b.HasOne("Preepex.Core.Domain.Entities.Shippingmethod", null)
                        .WithMany()
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_94A22CC12F6B31B9CA44439CEF6463A054E62508");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Activitylogtype", b =>
                {
                    b.Navigation("ActivityLog");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Addressattribute", b =>
                {
                    b.Navigation("Addressattributevalue");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Blogpost", b =>
                {
                    b.Navigation("BlogComment");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Category", b =>
                {
                    b.Navigation("ProductCategoryMapping");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Checkoutattribute", b =>
                {
                    b.Navigation("CheckoutAttributeValue");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Country", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Activitylog");

                    b.Navigation("BackinStockSubScription");

                    b.Navigation("BlogComment");

                    b.Navigation("CustomerPassword");

                    b.Navigation("ExternalAuthenticationRecord");

                    b.Navigation("ForumsPost");

                    b.Navigation("ForumsSubscription");

                    b.Navigation("ForumsTopic");

                    b.Navigation("Log");

                    b.Navigation("NewsComment");

                    b.Navigation("Order");

                    b.Navigation("PollvotingRecord");

                    b.Navigation("ProductReview");

                    b.Navigation("ReturnRequest");

                    b.Navigation("RewardPointsHistory");

                    b.Navigation("ShoppingCartItem");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Customerattribute", b =>
                {
                    b.Navigation("Customerattributevalue");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Customerrole", b =>
                {
                    b.Navigation("AclRecord");

                    b.Navigation("Tierprice");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Discount", b =>
                {
                    b.Navigation("DiscountRequirement");

                    b.Navigation("DiscountUsageHistory");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Discountrequirement", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Emailaccount", b =>
                {
                    b.Navigation("QueuedEmail");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsForum", b =>
                {
                    b.Navigation("ForumsTopic");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsGroup", b =>
                {
                    b.Navigation("ForumsForum");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsPost", b =>
                {
                    b.Navigation("ForumsPostvote");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ForumsTopic", b =>
                {
                    b.Navigation("ForumsPost");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Giftcard", b =>
                {
                    b.Navigation("GiftCardUsageHistory");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Language", b =>
                {
                    b.Navigation("BlogPost");

                    b.Navigation("LocaleStringResource");

                    b.Navigation("LocalizedProperty");

                    b.Navigation("News");

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Manufacturer", b =>
                {
                    b.Navigation("ProductManufacturerMapping");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsComment");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.NopAddress", b =>
                {
                    b.Navigation("Affiliate");

                    b.Navigation("OrderBillingAddress");

                    b.Navigation("OrderPickupAddress");

                    b.Navigation("OrderShippingAddress");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Order", b =>
                {
                    b.Navigation("DiscountusageHistory");

                    b.Navigation("GiftCardUsageHistory");

                    b.Navigation("OrderItem");

                    b.Navigation("OrderNote");

                    b.Navigation("RecurringPayment");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Orderitem", b =>
                {
                    b.Navigation("GiftCard");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Picture", b =>
                {
                    b.Navigation("PictureBinary");

                    b.Navigation("ProductPictureMapping");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Poll", b =>
                {
                    b.Navigation("Pollanswer");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Pollanswer", b =>
                {
                    b.Navigation("Pollvotingrecord");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Product", b =>
                {
                    b.Navigation("Backinstocksubscription");

                    b.Navigation("Orderitem");

                    b.Navigation("ProductCategoryMapping");

                    b.Navigation("ProductManufacturerMapping");

                    b.Navigation("ProductPictureMapping");

                    b.Navigation("ProductProductTagMapping");

                    b.Navigation("ProductProductattributeMapping");

                    b.Navigation("ProductSpecificationattributeMapping");

                    b.Navigation("Productattributecombination");

                    b.Navigation("Productreview");

                    b.Navigation("Productwarehouseinventory");

                    b.Navigation("Shoppingcartitem");

                    b.Navigation("Stockquantityhistory");

                    b.Navigation("Tierprice");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Productattribute", b =>
                {
                    b.Navigation("PredeFinedProductAttributeValue");

                    b.Navigation("ProductProductattributeMapping");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.ProductProductattributeMapping", b =>
                {
                    b.Navigation("Productattributevalue");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Productreview", b =>
                {
                    b.Navigation("ProductreviewReviewtypeMapping");

                    b.Navigation("Productreviewhelpfulness");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.RecurringPayment", b =>
                {
                    b.Navigation("RecurringPaymentHistory");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Reviewtype", b =>
                {
                    b.Navigation("ProductreviewReviewtypeMapping");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Rewardpointshistory", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Shipment", b =>
                {
                    b.Navigation("ShipmentItem");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Specificationattribute", b =>
                {
                    b.Navigation("SpecificationAttributeOption");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Specificationattributegroup", b =>
                {
                    b.Navigation("SpecificationAttribute");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Specificationattributeoption", b =>
                {
                    b.Navigation("ProductSpecificationAttributeMapping");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.StateProvince", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Store", b =>
                {
                    b.Navigation("BlogComment");

                    b.Navigation("NewsComment");

                    b.Navigation("ProductReview");

                    b.Navigation("StoreMapping");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Vendor", b =>
                {
                    b.Navigation("VendorNote");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Vendorattribute", b =>
                {
                    b.Navigation("VendorAttributeValue");
                });

            modelBuilder.Entity("Preepex.Core.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("ProductWarehouseInventory");
                });
#pragma warning restore 612, 618
        }
    }
}
